//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Life_Tracker
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Life_TrackerEntities : DbContext
    {
        public Life_TrackerEntities()
            : base("name=Life_TrackerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Disease> Diseases { get; set; }
        public virtual DbSet<Habit> Habits { get; set; }
        public virtual DbSet<Info> Infoes { get; set; }
        public virtual DbSet<MedicineDose> MedicineDoses { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonHabit> PersonHabits { get; set; }
        public virtual DbSet<PersonRest> PersonRests { get; set; }
        public virtual DbSet<Proj_Msg_Videos> Proj_Msg_Videos { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Rest> Rests { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<SuffersFrom> SuffersFroms { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskList> TaskLists { get; set; }
    
        public virtual int AddProject(Nullable<int> personID, string title, string thumbnail, string link_git, string link_Prod, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var thumbnailParameter = thumbnail != null ?
                new ObjectParameter("Thumbnail", thumbnail) :
                new ObjectParameter("Thumbnail", typeof(string));
    
            var link_gitParameter = link_git != null ?
                new ObjectParameter("Link_git", link_git) :
                new ObjectParameter("Link_git", typeof(string));
    
            var link_ProdParameter = link_Prod != null ?
                new ObjectParameter("Link_Prod", link_Prod) :
                new ObjectParameter("Link_Prod", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProject", personIDParameter, titleParameter, thumbnailParameter, link_gitParameter, link_ProdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int AddProjectContributor(Nullable<int> personId, Nullable<int> projId, Nullable<int> contribId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var contribIdParameter = contribId.HasValue ?
                new ObjectParameter("contribId", contribId) :
                new ObjectParameter("contribId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProjectContributor", personIdParameter, projIdParameter, contribIdParameter);
        }
    
        public virtual int AddProjectImgVid(Nullable<int> personId, Nullable<int> projId, string imgVidLink)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var imgVidLinkParameter = imgVidLink != null ?
                new ObjectParameter("imgVidLink", imgVidLink) :
                new ObjectParameter("imgVidLink", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProjectImgVid", personIdParameter, projIdParameter, imgVidLinkParameter);
        }
    
        public virtual int AddUser(string fname, string lname, string email, string password, string cV_Link, string photo_Link, Nullable<int> height, Nullable<int> weight, string blood, string type)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cV_LinkParameter = cV_Link != null ?
                new ObjectParameter("CV_Link", cV_Link) :
                new ObjectParameter("CV_Link", typeof(string));
    
            var photo_LinkParameter = photo_Link != null ?
                new ObjectParameter("Photo_Link", photo_Link) :
                new ObjectParameter("Photo_Link", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var bloodParameter = blood != null ?
                new ObjectParameter("Blood", blood) :
                new ObjectParameter("Blood", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", fnameParameter, lnameParameter, emailParameter, passwordParameter, cV_LinkParameter, photo_LinkParameter, heightParameter, weightParameter, bloodParameter, typeParameter);
        }
    
        public virtual int AddUserHabit(Nullable<int> personID, string habitName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var habitNameParameter = habitName != null ?
                new ObjectParameter("HabitName", habitName) :
                new ObjectParameter("HabitName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserHabit", personIDParameter, habitNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int AddUserProject(Nullable<int> personId, string title, string thumbnail, string link_git, string link_Prod, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var thumbnailParameter = thumbnail != null ?
                new ObjectParameter("Thumbnail", thumbnail) :
                new ObjectParameter("Thumbnail", typeof(string));
    
            var link_gitParameter = link_git != null ?
                new ObjectParameter("Link_git", link_git) :
                new ObjectParameter("Link_git", typeof(string));
    
            var link_ProdParameter = link_Prod != null ?
                new ObjectParameter("Link_Prod", link_Prod) :
                new ObjectParameter("Link_Prod", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserProject", personIdParameter, titleParameter, thumbnailParameter, link_gitParameter, link_ProdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int AddUserRest(Nullable<int> personID, Nullable<int> restID, string place, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var restIDParameter = restID.HasValue ?
                new ObjectParameter("RestID", restID) :
                new ObjectParameter("RestID", typeof(int));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserRest", personIDParameter, restIDParameter, placeParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual int AddUserTaskList(Nullable<int> iD, Nullable<System.DateTime> startDate, string title)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserTaskList", iDParameter, startDateParameter, titleParameter);
        }
    
        public virtual int AddUserTaskListTask(Nullable<int> ownerID, Nullable<int> taskListId, string description, string state, Nullable<System.DateTime> startDate, Nullable<System.DateTime> deadLine, string feedBack)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("ownerID", ownerID) :
                new ObjectParameter("ownerID", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var deadLineParameter = deadLine.HasValue ?
                new ObjectParameter("DeadLine", deadLine) :
                new ObjectParameter("DeadLine", typeof(System.DateTime));
    
            var feedBackParameter = feedBack != null ?
                new ObjectParameter("FeedBack", feedBack) :
                new ObjectParameter("FeedBack", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserTaskListTask", ownerIDParameter, taskListIdParameter, descriptionParameter, stateParameter, startDateParameter, deadLineParameter, feedBackParameter);
        }
    
        public virtual int DeletePatientDiseaseMedicineDose(Nullable<int> patientId, Nullable<int> diseaseId, string doseName, Nullable<int> doctorId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            var diseaseIdParameter = diseaseId.HasValue ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(int));
    
            var doseNameParameter = doseName != null ?
                new ObjectParameter("doseName", doseName) :
                new ObjectParameter("doseName", typeof(string));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatientDiseaseMedicineDose", patientIdParameter, diseaseIdParameter, doseNameParameter, doctorIdParameter);
        }
    
        public virtual int DeleteProject(Nullable<int> personID, Nullable<int> projectID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProject", personIDParameter, projectIDParameter);
        }
    
        public virtual int DeleteProjectContributor(Nullable<int> personId, Nullable<int> projId, Nullable<int> contribId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var contribIdParameter = contribId.HasValue ?
                new ObjectParameter("contribId", contribId) :
                new ObjectParameter("contribId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProjectContributor", personIdParameter, projIdParameter, contribIdParameter);
        }
    
        public virtual int DeleteProjectImgVid(Nullable<int> personId, Nullable<int> projId, string imgVidLink)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var imgVidLinkParameter = imgVidLink != null ?
                new ObjectParameter("imgVidLink", imgVidLink) :
                new ObjectParameter("imgVidLink", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProjectImgVid", personIdParameter, projIdParameter, imgVidLinkParameter);
        }
    
        public virtual int DeleteUserhabit(Nullable<int> personID, string habitName)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var habitNameParameter = habitName != null ?
                new ObjectParameter("HabitName", habitName) :
                new ObjectParameter("HabitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserhabit", personIDParameter, habitNameParameter);
        }
    
        public virtual int DeleteUserInfo(Nullable<int> iD, string key)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserInfo", iDParameter, keyParameter);
        }
    
        public virtual int DeleteUserTaskList(Nullable<int> ownerId, Nullable<int> taskListId, Nullable<int> adminId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("ownerId", ownerId) :
                new ObjectParameter("ownerId", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserTaskList", ownerIdParameter, taskListIdParameter, adminIdParameter);
        }
    
        public virtual int DeleteUserTaskListTask(Nullable<int> ownerID, Nullable<int> taskListId, Nullable<int> taskId, Nullable<int> adminID)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("ownerID", ownerID) :
                new ObjectParameter("ownerID", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserTaskListTask", ownerIDParameter, taskListIdParameter, taskIdParameter, adminIDParameter);
        }
    
        public virtual int EditPatientDiseaseMedicineDose(Nullable<int> patientId, Nullable<int> diseaseId, Nullable<int> doctorId, string medicineName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> first_Hour, Nullable<int> frequency)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            var diseaseIdParameter = diseaseId.HasValue ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(int));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(int));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var first_HourParameter = first_Hour.HasValue ?
                new ObjectParameter("First_Hour", first_Hour) :
                new ObjectParameter("First_Hour", typeof(System.DateTime));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditPatientDiseaseMedicineDose", patientIdParameter, diseaseIdParameter, doctorIdParameter, medicineNameParameter, startDateParameter, endDateParameter, first_HourParameter, frequencyParameter);
        }
    
        public virtual int EditUserDayTS(Nullable<int> iD, string date, Nullable<System.TimeSpan> start_Time, Nullable<System.TimeSpan> end_Time, string to_Do)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var start_TimeParameter = start_Time.HasValue ?
                new ObjectParameter("Start_Time", start_Time) :
                new ObjectParameter("Start_Time", typeof(System.TimeSpan));
    
            var end_TimeParameter = end_Time.HasValue ?
                new ObjectParameter("End_Time", end_Time) :
                new ObjectParameter("End_Time", typeof(System.TimeSpan));
    
            var to_DoParameter = to_Do != null ?
                new ObjectParameter("To_Do", to_Do) :
                new ObjectParameter("To_Do", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUserDayTS", iDParameter, dateParameter, start_TimeParameter, end_TimeParameter, to_DoParameter);
        }
    
        public virtual int EditUserhabit(Nullable<int> personID, string habitName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var habitNameParameter = habitName != null ?
                new ObjectParameter("HabitName", habitName) :
                new ObjectParameter("HabitName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUserhabit", personIDParameter, habitNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int EditUserInfo(Nullable<int> pID, string infokey, string infoValue)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            var infokeyParameter = infokey != null ?
                new ObjectParameter("Infokey", infokey) :
                new ObjectParameter("Infokey", typeof(string));
    
            var infoValueParameter = infoValue != null ?
                new ObjectParameter("InfoValue", infoValue) :
                new ObjectParameter("InfoValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUserInfo", pIDParameter, infokeyParameter, infoValueParameter);
        }
    
        public virtual int EditUserRest(Nullable<int> personID, Nullable<int> restID, string place, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var restIDParameter = restID.HasValue ?
                new ObjectParameter("RestID", restID) :
                new ObjectParameter("RestID", typeof(int));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUserRest", personIDParameter, restIDParameter, placeParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual int EditUserTaskList(Nullable<int> ownerId, Nullable<int> taskListId, Nullable<int> adminId, Nullable<System.DateTime> startDate, string title)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("ownerId", ownerId) :
                new ObjectParameter("ownerId", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUserTaskList", ownerIdParameter, taskListIdParameter, adminIdParameter, startDateParameter, titleParameter);
        }
    
        public virtual int EditUserTaskListTask(Nullable<int> ownerID, Nullable<int> adminId, Nullable<int> taskListId, Nullable<int> taskId, string description, string state, Nullable<System.DateTime> startDate, Nullable<System.DateTime> deadLine, string feedBack)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("ownerID", ownerID) :
                new ObjectParameter("ownerID", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var deadLineParameter = deadLine.HasValue ?
                new ObjectParameter("DeadLine", deadLine) :
                new ObjectParameter("DeadLine", typeof(System.DateTime));
    
            var feedBackParameter = feedBack != null ?
                new ObjectParameter("FeedBack", feedBack) :
                new ObjectParameter("FeedBack", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUserTaskListTask", ownerIDParameter, adminIdParameter, taskListIdParameter, taskIdParameter, descriptionParameter, stateParameter, startDateParameter, deadLineParameter, feedBackParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetGiverUsers(Nullable<int> giverID)
        {
            var giverIDParameter = giverID.HasValue ?
                new ObjectParameter("giverID", giverID) :
                new ObjectParameter("giverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetGiverUsers", giverIDParameter);
        }
    
        public virtual ObjectResult<GetLast20Project_Result> GetLast20Project(Nullable<int> startIndex)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLast20Project_Result>("GetLast20Project", startIndexParameter);
        }
    
        public virtual ObjectResult<GetPatientDisease_Result> GetPatientDisease(Nullable<int> patientId, Nullable<int> diseaseId, Nullable<int> doctorId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            var diseaseIdParameter = diseaseId.HasValue ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(int));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientDisease_Result>("GetPatientDisease", patientIdParameter, diseaseIdParameter, doctorIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPersonProject(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPersonProject", personIDParameter);
        }
    
        public virtual ObjectResult<GetUserAllergies_Result> GetUserAllergies(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserAllergies_Result>("GetUserAllergies", iDParameter);
        }
    
        public virtual ObjectResult<GetUserDataMin_Result> GetUserDataMin(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDataMin_Result>("GetUserDataMin", iDParameter);
        }
    
        public virtual ObjectResult<GetUserTaskListTask_Result> GetUserTaskListTask(Nullable<int> personId, Nullable<int> taskListId, Nullable<int> adminId, Nullable<int> taskId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserTaskListTask_Result>("GetUserTaskListTask", personIdParameter, taskListIdParameter, adminIdParameter, taskIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUserTaskListTasks(Nullable<int> personId, Nullable<int> taskListId, Nullable<int> adminId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var taskListIdParameter = taskListId.HasValue ?
                new ObjectParameter("taskListId", taskListId) :
                new ObjectParameter("taskListId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUserTaskListTasks", personIdParameter, taskListIdParameter, adminIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdatePersonData(Nullable<int> pID, string fname, string lname, string email, string password, string cV_Link, Nullable<System.DateTime> last_modified_schedule, string photo_Link, Nullable<int> height, Nullable<int> weight, string blood, string type)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cV_LinkParameter = cV_Link != null ?
                new ObjectParameter("CV_Link", cV_Link) :
                new ObjectParameter("CV_Link", typeof(string));
    
            var last_modified_scheduleParameter = last_modified_schedule.HasValue ?
                new ObjectParameter("last_modified_schedule", last_modified_schedule) :
                new ObjectParameter("last_modified_schedule", typeof(System.DateTime));
    
            var photo_LinkParameter = photo_Link != null ?
                new ObjectParameter("Photo_Link", photo_Link) :
                new ObjectParameter("Photo_Link", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var bloodParameter = blood != null ?
                new ObjectParameter("Blood", blood) :
                new ObjectParameter("Blood", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePersonData", pIDParameter, fnameParameter, lnameParameter, emailParameter, passwordParameter, cV_LinkParameter, last_modified_scheduleParameter, photo_LinkParameter, heightParameter, weightParameter, bloodParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetPersonData_Result> GetPersonData(Nullable<int> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonData_Result>("GetPersonData", pIDParameter);
        }
    
        public virtual ObjectResult<GetUserDaySchedule_Result> GetUserDaySchedule(Nullable<int> iD, string date)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDaySchedule_Result>("GetUserDaySchedule", iDParameter, dateParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", iDParameter);
        }
    
        public virtual ObjectResult<GetPersonInfo_Result> GetPersonInfo(Nullable<int> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonInfo_Result>("GetPersonInfo", pIDParameter);
        }
    
        public virtual int DeleteUserAllergy(Nullable<int> iD, Nullable<int> allergyID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var allergyIDParameter = allergyID.HasValue ?
                new ObjectParameter("AllergyID", allergyID) :
                new ObjectParameter("AllergyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserAllergy", iDParameter, allergyIDParameter);
        }
    
        public virtual int DeleteUserDayTS(Nullable<int> iD, string day, Nullable<System.TimeSpan> start)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dayParameter = day != null ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserDayTS", iDParameter, dayParameter, startParameter);
        }
    }
}
